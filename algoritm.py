1. Алгоритм Евклида для нахождения НОД двух чисел:


1. Вводим два числа a и b
2. Пока b не равно 0, выполняем следующие действия:
   a = a % b
   меняем местами a и b
3. Выводим a - это и есть НОД


2. Алгоритм бинарного поиска:


1. Вводим отсортированный массив arr и искомый элемент x
2. Задаем начальный индекс left = 0 и конечный индекс right = длина массива - 1
3. Пока left <= right, выполняем следующие действия:
   middle = (left + right) // 2
   если arr[middle] == x, то возвращаем middle
   если arr[middle] < x, то left = middle + 1
   если arr[middle] > x, то right = middle - 1
4. Если элемент не найден, возвращаем -1


3. Алгоритм сортировки выбором:


1. Вводим неотсортированный массив arr
2. Задаем переменную n = длина массива
3. Для каждого i от 0 до n-2 выполняем следующие действия:
   min_index = i
   для каждого j от i+1 до n-1 выполняем следующие действия:
      если arr[j] < arr[min_index], то min_index = j
   меняем местами arr[i] и arr[min_index]
4. Выводим отсортированный массив arr


4. Алгоритм быстрой сортировки:


1. Вводим неотсортированный массив arr
2. Задаем функцию partition с параметрами arr, left и right:
   pivot = arr[right]
   i = left - 1
   для каждого j от left до right-1 выполняем следующие действия:
      если arr[j] <= pivot, то i = i + 1, меняем местами arr[i] и arr[j]
   меняем местами arr[i+1] и arr[right]
   возвращаем i+1
3. Задаем функцию quicksort с параметрами arr, left и right:
   если left < right, то выполняем следующие действия:
      pivot_index = partition(arr, left, right)
      quicksort(arr, left, pivot_index-1)
      quicksort(arr, pivot_index+1, right)
4. Вызываем quicksort(arr, 0, длина массива - 1)
5. Выводим отсортированный массив arr
